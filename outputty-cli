#!/usr/bin/env python
# coding: utf-8

# Copyright 2011 √Ålvaro Justen
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import argparse
import tempfile
from cStringIO import StringIO
from outputty import Table


parser = argparse.ArgumentParser(description='Show data in terminal in a '
'beautiful way, with Python')
parser.add_argument('--table', dest='table', help='Create a table',
                    action='store_true')
parser.add_argument('--to-csv', dest='to_csv', help='Export data to CSV file',
                    action='store', metavar='filename', default='', nargs='?')
parser.add_argument('--from-csv', dest='from_csv', help='Import data from CSV',
                    action='store', metavar='filename', default='', nargs='?')
parser.add_argument('--input-encoding', dest='input_encoding',
                    help='Set new input encoding (default: UTF-8)',
                    action='store', metavar='encoding', default='utf8',
                    nargs='?')

args = parser.parse_args()
if not args.table:
    parser.print_help()
else:
    input_filename = args.from_csv or sys.stdin
    try:
        table = Table(input_encoding=args.input_encoding)
        table.read('csv', input_filename)
    except IOError as exception:
        sys.stderr.write(str(exception) + '\n')
        exit(1)

    if args.to_csv is None: #--to-csv without filename
        temp_fp = tempfile.NamedTemporaryFile(delete=False)
        temp_fp.close()
        table.write('csv', temp_fp.name)
        fp = open(temp_fp.name)
        contents = fp.read()
        fp.close()
        os.remove(temp_fp.name)
        print contents
    elif args.to_csv:
        filename = args.to_csv
        try:
            table.write('csv', filename)
        except IOError as exception:
            sys.stderr.write(str(exception) + '\n')
            exit(2)
    else:
        print table
