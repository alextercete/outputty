#!/usr/bin/env python
# coding: utf-8

# Copyright 2011 √Ålvaro Justen
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import argparse
import tempfile
from cStringIO import StringIO
from outputty import Table


table = Table()
parser = argparse.ArgumentParser(description='outputty: import, filter and '
                                             'export data easily.')
parser.add_argument('--input-encoding', dest='input_encoding',
                    help='Set new input encoding (default: %s)' % \
                    table.input_encoding,
                    action='store', metavar='encoding', default='utf8',
                    nargs='?')
plugins = table.available_plugins()
plugin_names = plugins.keys()
plugin_names.sort()
for plugin in plugin_names:
    if 'read' in plugins[plugin]:
        parser.add_argument('--read-' + plugin, dest='read_' + plugin,
                            help='Import data using plugin ' + plugin,
                            action='store', metavar='filename', default='',
                            nargs='?')
    if 'write' in plugins[plugin]:
        parser.add_argument('--write-' + plugin, dest='write_' + plugin,
                            help='Export data using plugin ' + plugin,
                            action='store', metavar='filename', default='',
                            nargs='?')

args = vars(parser.parse_args())
table.input_encoding = args['input_encoding']
read_parameter = sys.stdin
write_parameter = sys.stdout
read_plugin = 'csv'
write_plugin = 'text'
plugin_names.reverse()
for plugin in plugin_names:
    if 'read' in plugins[plugin] and 'read_' + plugin in args and \
       args['read_' + plugin]:
        read_plugin = plugin
        if args['read_' + plugin]:
            read_parameter = args['read_' + plugin]
    if 'write' in plugins[plugin] and 'write_' + plugin in args and \
       args['write_' + plugin]:
        write_plugin = plugin
        if args['write_' + plugin]:
            write_parameter = args['write_' + plugin]

try:
    table.read(read_plugin, read_parameter)
except IOError as e:
    sys.stderr.write(str(e) + '\n')
    sys.exit(1)

try:
    table.write(write_plugin, write_parameter)
except IOError as e:
    sys.stderr.write(str(e) + '\n')
    sys.exit(2)
